namespace _retail
{
	#if __has_include(<Eigen/Core>)
	template <class T>	XTAL_USE     eigenclass_t =	         Eigen::internal::traits<based_t<T>>;
	template <class T>	XTAL_USE     eigenvalue_t =	typename Eigen::internal::traits<based_t<T>>::Scalar;
	template <class T>	XTAL_ASK     eigenclass_q =	complete_q<eigenclass_t<T>>;
	template <class T>	XTAL_ASK     eigenvalue_q =	complete_q<eigenvalue_t<T>>;//TODO: Restrict to `Array`-derived.
	#else
	template <class T>	XTAL_USE     eigenclass_t =	void;
	template <class T>	XTAL_USE     eigenvalue_t =	void;
	template <class T>	XTAL_ASK     eigenclass_q =	false;
	template <class T>	XTAL_ASK     eigenvalue_q =	false;
	#endif

	template <eigenvalue_q T>
	XTAL_TYP devolve<T> {using value_type = eigenvalue_t<T>;};

}
