#pragma once
#include "./any.ii"






XTAL_ENV_(push)
namespace xtal::math
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <int N_base>
struct base
{
	template <class S>
	class subtype: public bond::compose_s<S>
	{
		using S_ = bond::compose_s<S>;

	public:
		using S_::S_;

		template <auto ...Is>
		XTAL_FN2 function(auto &&u)
		XTAL_0EX
		{
			using U = XTAL_TYP_(u); using re = bond::realize<U>;
			XTAL_LET N_domain = re::argue_n<N_base>;
			return S_::template function<Is...>(N_domain*u);
		};

	};
	template <class S> requires antimorphism_q<S>
	class subtype<S>: public bond::compose_s<S>
	{
		using S_ = bond::compose_s<S>;

	public:
		using S_::S_;

		template <auto ...Is>
		XTAL_FN2 function(auto &&u)
		XTAL_0EX
		{
			using U = XTAL_TYP_(u); using re = bond::realize<U>;
			XTAL_LET N_comain = re::argue_n<N_base>;
			return S_::template function<Is...>(u)*re::ratio_f(N_comain);
		};

	};
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
