#pragma once






#include "./vectrol.hh"
XTAL_ENV_(push)
namespace xtal::process
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <auto ..._s>
struct traits<math::zavalishin::vectrol<_s...>>
{
	using superkind = traits<>;

	template <class S>
	class subtype : public bond::compose_s<S, superkind>
	{
		using S_ = bond::compose_s<S, superkind>;
		using T_ = typename S_::self_type;
	
	public:
		using S_::S_;

		template <extent_type N_mask=1>
		struct   attach
		{
			template <class R>
			using subtype = bond::compose_s<R, typename S_::template   attach<N_mask>
			,	provision::voiced<void
				//\
				,	typename T_::reshape_type::template   attach<N_mask>
				,	typename R ::reshape_type::template   attach<N_mask>
				>
			>;

		};

	};
};


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
